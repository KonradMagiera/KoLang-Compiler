//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KoLang.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class KoLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, PRINT=21, READ=22, STRING=23, ID=24, INT=25, 
		REAL=26, ASSIGN=27, LPARENTHESIS=28, RPARENTHESIS=29, LBRACKET=30, RBRACKET=31, 
		LBRACE=32, RBRACE=33, WS=34, COMMENT=35, MULTILINECOMMENT=36;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_value = 2, RULE_arrayAssignItem = 3, 
		RULE_math = 4, RULE_number = 5, RULE_stringConcat = 6, RULE_concatVal = 7, 
		RULE_arrayVal = 8, RULE_whileComp = 9, RULE_elseifStatement = 10, RULE_elseStatement = 11, 
		RULE_comparision = 12, RULE_compValueFirst = 13, RULE_compValueSecond = 14, 
		RULE_callFunction = 15, RULE_functionArguments = 16, RULE_functionArg = 17, 
		RULE_givenFunctionArguments = 18, RULE_givenFunctionArg = 19, RULE_functionArgType = 20, 
		RULE_functionReturnType = 21, RULE_operatorOne = 22, RULE_operatorTwo = 23, 
		RULE_compareOperator = 24;
	public static readonly string[] ruleNames = {
		"program", "statement", "value", "arrayAssignItem", "math", "number", 
		"stringConcat", "concatVal", "arrayVal", "whileComp", "elseifStatement", 
		"elseStatement", "comparision", "compValueFirst", "compValueSecond", "callFunction", 
		"functionArguments", "functionArg", "givenFunctionArguments", "givenFunctionArg", 
		"functionArgType", "functionReturnType", "operatorOne", "operatorTwo", 
		"compareOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'zmienna'", "','", "'if'", "'while'", "'return'", "'+'", "'else if'", 
		"'else'", "'int'", "'double'", "'void'", "'-'", "'*'", "'/'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'pokazMiSwojeTowary'", "'DajMiLiczbe'", 
		null, null, null, null, "'='", "'('", "')'", "'['", "']'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "PRINT", "READ", 
		"STRING", "ID", "INT", "REAL", "ASSIGN", "LPARENTHESIS", "RPARENTHESIS", 
		"LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "WS", "COMMENT", "MULTILINECOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KoLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KoLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KoLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KoLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KoLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
				{
				{
				State = 50;
				statement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KoLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		public PrintContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}
	public partial class ReadContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(KoLangParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		public ReadContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
	}
	public partial class ChangeArrayItemValueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KoLangParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KoLangParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KoLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public ChangeArrayItemValueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterChangeArrayItemValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitChangeArrayItemValue(this);
		}
	}
	public partial class AssignArrayContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KoLangParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KoLangParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KoLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValContext[] arrayVal() {
			return GetRuleContexts<ArrayValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValContext arrayVal(int i) {
			return GetRuleContext<ArrayValContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		public AssignArrayContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterAssignArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitAssignArray(this);
		}
	}
	public partial class PrintArrayItemContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KoLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KoLangParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KoLangParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		public PrintArrayItemContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterPrintArrayItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitPrintArrayItem(this);
		}
	}
	public partial class FunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypeContext functionReturnType() {
			return GetRuleContext<FunctionReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public FunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}
	public partial class AssignFunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KoLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		public AssignFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterAssignFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitAssignFunction(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisionContext comparision() {
			return GetRuleContext<ComparisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement() {
			return GetRuleContext<ElseifStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class WhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileCompContext whileComp() {
			return GetRuleContext<WhileCompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}
	public partial class InvokeFunctionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		public InvokeFunctionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterInvokeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitInvokeFunction(this);
		}
	}
	public partial class AssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KoLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}
	public partial class AssignArrayItemToIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KoLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignItemContext arrayAssignItem() {
			return GetRuleContext<ArrayAssignItemContext>(0);
		}
		public AssignArrayItemToIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterAssignArrayItemToID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitAssignArrayItemToID(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				Match(PRINT);
				State = 59;
				Match(LPARENTHESIS);
				State = 60;
				value();
				State = 61;
				Match(RPARENTHESIS);
				}
				break;
			case 2:
				_localctx = new PrintArrayItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				Match(PRINT);
				State = 64;
				Match(LPARENTHESIS);
				State = 65;
				Match(ID);
				State = 66;
				Match(LBRACKET);
				State = 67;
				Match(INT);
				State = 68;
				Match(RBRACKET);
				State = 69;
				Match(RPARENTHESIS);
				}
				break;
			case 3:
				_localctx = new ReadContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 70;
				Match(READ);
				State = 71;
				Match(LPARENTHESIS);
				State = 72;
				Match(ID);
				State = 73;
				Match(RPARENTHESIS);
				}
				break;
			case 4:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 74;
				Match(T__0);
				State = 75;
				Match(ID);
				State = 76;
				Match(ASSIGN);
				State = 77;
				value();
				}
				break;
			case 5:
				_localctx = new AssignArrayItemToIDContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 78;
				Match(T__0);
				State = 79;
				Match(ID);
				State = 80;
				Match(ASSIGN);
				State = 81;
				arrayAssignItem();
				}
				break;
			case 6:
				_localctx = new ChangeArrayItemValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				Match(ID);
				State = 83;
				Match(LBRACKET);
				State = 84;
				Match(INT);
				State = 85;
				Match(RBRACKET);
				State = 86;
				Match(ASSIGN);
				State = 87;
				math(0);
				}
				break;
			case 7:
				_localctx = new AssignArrayContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 88;
				Match(T__0);
				State = 89;
				Match(ID);
				State = 90;
				Match(LBRACKET);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 91;
					Match(INT);
					}
				}

				State = 94;
				Match(RBRACKET);
				State = 95;
				Match(ASSIGN);
				State = 96;
				Match(LBRACE);
				State = 97;
				arrayVal();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 98;
					Match(T__1);
					State = 99;
					arrayVal();
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105;
				Match(RBRACE);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				Match(T__2);
				State = 108;
				Match(LPARENTHESIS);
				State = 109;
				comparision();
				State = 110;
				Match(RPARENTHESIS);
				State = 111;
				Match(LBRACE);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
					{
					{
					State = 112;
					statement();
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 118;
				Match(RBRACE);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 119;
					elseifStatement();
					}
				}

				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 122;
					elseStatement();
					}
				}

				}
				break;
			case 9:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 125;
				Match(T__3);
				State = 126;
				Match(LPARENTHESIS);
				State = 127;
				whileComp();
				State = 128;
				Match(RPARENTHESIS);
				State = 129;
				Match(LBRACE);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
					{
					{
					State = 130;
					statement();
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 136;
				Match(RBRACE);
				}
				break;
			case 10:
				_localctx = new FunctionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 138;
				functionReturnType();
				State = 139;
				Match(ID);
				State = 140;
				Match(LPARENTHESIS);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8 || _la==T__9) {
					{
					State = 141;
					functionArguments();
					}
				}

				State = 144;
				Match(RPARENTHESIS);
				State = 145;
				Match(LBRACE);
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
					{
					{
					State = 146;
					statement();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 152;
					Match(T__4);
					State = 153;
					math(0);
					}
				}

				State = 156;
				Match(RBRACE);
				}
				break;
			case 11:
				_localctx = new InvokeFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 158;
				callFunction();
				}
				break;
			case 12:
				_localctx = new AssignFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 159;
				Match(T__0);
				State = 160;
				Match(ID);
				State = 161;
				Match(ASSIGN);
				State = 162;
				callFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatContext stringConcat() {
			return GetRuleContext<StringConcatContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 4, RULE_value);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				math(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				stringConcat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KoLangParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KoLangParser.RBRACKET, 0); }
		public ArrayAssignItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterArrayAssignItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitArrayAssignItem(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignItemContext arrayAssignItem() {
		ArrayAssignItemContext _localctx = new ArrayAssignItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_arrayAssignItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(ID);
			State = 171;
			Match(LBRACKET);
			State = 172;
			Match(INT);
			State = 173;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
	 
		public MathContext() { }
		public virtual void CopyFrom(MathContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleContext : MathContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SingleContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitSingle(this);
		}
	}
	public partial class AddContext : MathContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOneContext operatorOne() {
			return GetRuleContext<OperatorOneContext>(0);
		}
		public AddContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}
	public partial class ParentContext : MathContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		public ParentContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterParent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitParent(this);
		}
	}
	public partial class MultiplyContext : MathContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorTwoContext operatorTwo() {
			return GetRuleContext<OperatorTwoContext>(0);
		}
		public MultiplyContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		return math(0);
	}

	private MathContext math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathContext _localctx = new MathContext(Context, _parentState);
		MathContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPARENTHESIS:
				{
				_localctx = new ParentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 176;
				Match(LPARENTHESIS);
				State = 177;
				math(0);
				State = 178;
				Match(RPARENTHESIS);
				}
				break;
			case ID:
			case INT:
			case REAL:
				{
				_localctx = new SingleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new MultiplyContext(new MathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_math);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184;
						operatorTwo();
						State = 185;
						math(4);
						}
						break;
					case 2:
						{
						_localctx = new AddContext(new MathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_math);
						State = 187;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 188;
						operatorOne();
						State = 189;
						math(3);
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KoLangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << REAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConcatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatValContext[] concatVal() {
			return GetRuleContexts<ConcatValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatValContext concatVal(int i) {
			return GetRuleContext<ConcatValContext>(i);
		}
		public StringConcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterStringConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitStringConcat(this);
		}
	}

	[RuleVersion(0)]
	public StringConcatContext stringConcat() {
		StringConcatContext _localctx = new StringConcatContext(Context, State);
		EnterRule(_localctx, 12, RULE_stringConcat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			concatVal();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 199;
				Match(T__5);
				State = 200;
				concatVal();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KoLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KoLangParser.REAL, 0); }
		public ConcatValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterConcatVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitConcatVal(this);
		}
	}

	[RuleVersion(0)]
	public ConcatValContext concatVal() {
		ConcatValContext _localctx = new ConcatValContext(Context, State);
		EnterRule(_localctx, 14, RULE_concatVal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << REAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(KoLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(KoLangParser.REAL, 0); }
		public ArrayValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterArrayVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitArrayVal(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValContext arrayVal() {
		ArrayValContext _localctx = new ArrayValContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayVal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompValueFirstContext compValueFirst() {
			return GetRuleContext<CompValueFirstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompValueSecondContext compValueSecond() {
			return GetRuleContext<CompValueSecondContext>(0);
		}
		public WhileCompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileComp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterWhileComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitWhileComp(this);
		}
	}

	[RuleVersion(0)]
	public WhileCompContext whileComp() {
		WhileCompContext _localctx = new WhileCompContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileComp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			compValueFirst();
			State = 211;
			compareOperator();
			State = 212;
			compValueSecond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisionContext comparision() {
			return GetRuleContext<ComparisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement() {
			return GetRuleContext<ElseifStatementContext>(0);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(T__6);
			State = 215;
			Match(LPARENTHESIS);
			State = 216;
			comparision();
			State = 217;
			Match(RPARENTHESIS);
			State = 218;
			Match(LBRACE);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
				{
				{
				State = 219;
				statement();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225;
			Match(RBRACE);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 226;
				elseifStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(KoLangParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(KoLangParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__7);
			State = 230;
			Match(LBRACE);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
				{
				{
				State = 231;
				statement();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompValueFirstContext compValueFirst() {
			return GetRuleContext<CompValueFirstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompValueSecondContext compValueSecond() {
			return GetRuleContext<CompValueSecondContext>(0);
		}
		public ComparisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterComparision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitComparision(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionContext comparision() {
		ComparisionContext _localctx = new ComparisionContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			compValueFirst();
			State = 240;
			compareOperator();
			State = 241;
			compValueSecond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompValueFirstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public CompValueFirstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compValueFirst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterCompValueFirst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitCompValueFirst(this);
		}
	}

	[RuleVersion(0)]
	public CompValueFirstContext compValueFirst() {
		CompValueFirstContext _localctx = new CompValueFirstContext(Context, State);
		EnterRule(_localctx, 26, RULE_compValueFirst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			math(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompValueSecondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public CompValueSecondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compValueSecond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterCompValueSecond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitCompValueSecond(this);
		}
	}

	[RuleVersion(0)]
	public CompValueSecondContext compValueSecond() {
		CompValueSecondContext _localctx = new CompValueSecondContext(Context, State);
		EnterRule(_localctx, 28, RULE_compValueSecond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			math(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(KoLangParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(KoLangParser.RPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GivenFunctionArgumentsContext givenFunctionArguments() {
			return GetRuleContext<GivenFunctionArgumentsContext>(0);
		}
		public CallFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterCallFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitCallFunction(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionContext callFunction() {
		CallFunctionContext _localctx = new CallFunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_callFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(ID);
			State = 248;
			Match(LPARENTHESIS);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 249;
				givenFunctionArguments();
				}
			}

			State = 252;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			functionArg();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 255;
				Match(T__1);
				State = 256;
				functionArg();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgTypeContext functionArgType() {
			return GetRuleContext<FunctionArgTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			functionArgType();
			State = 263;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivenFunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GivenFunctionArgContext[] givenFunctionArg() {
			return GetRuleContexts<GivenFunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivenFunctionArgContext givenFunctionArg(int i) {
			return GetRuleContext<GivenFunctionArgContext>(i);
		}
		public GivenFunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_givenFunctionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterGivenFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitGivenFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public GivenFunctionArgumentsContext givenFunctionArguments() {
		GivenFunctionArgumentsContext _localctx = new GivenFunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_givenFunctionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			givenFunctionArg();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 266;
				Match(T__1);
				State = 267;
				givenFunctionArg();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivenFunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KoLangParser.ID, 0); }
		public GivenFunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_givenFunctionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterGivenFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitGivenFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public GivenFunctionArgContext givenFunctionArg() {
		GivenFunctionArgContext _localctx = new GivenFunctionArgContext(Context, State);
		EnterRule(_localctx, 38, RULE_givenFunctionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgTypeContext : ParserRuleContext {
		public FunctionArgTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterFunctionArgType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitFunctionArgType(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgTypeContext functionArgType() {
		FunctionArgTypeContext _localctx = new FunctionArgTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionArgType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnTypeContext : ParserRuleContext {
		public FunctionReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitFunctionReturnType(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnTypeContext functionReturnType() {
		FunctionReturnTypeContext _localctx = new FunctionReturnTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionReturnType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOneContext : ParserRuleContext {
		public OperatorOneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOne; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterOperatorOne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitOperatorOne(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOneContext operatorOne() {
		OperatorOneContext _localctx = new OperatorOneContext(Context, State);
		EnterRule(_localctx, 44, RULE_operatorOne);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorTwoContext : ParserRuleContext {
		public OperatorTwoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorTwo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterOperatorTwo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitOperatorTwo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorTwoContext operatorTwo() {
		OperatorTwoContext _localctx = new OperatorTwoContext(Context, State);
		EnterRule(_localctx, 46, RULE_operatorTwo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKoLangListener typedListener = listener as IKoLangListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return math_sempred((MathContext)_localctx, predIndex);
		}
		return true;
	}
	private bool math_sempred(MathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\x120', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x39', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '_', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'g', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'j', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 't', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', 'w', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '{', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '~', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x86', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x89', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x91', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x96', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x99', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x9D', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\xA6', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\xAB', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB8', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xC2', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xC5', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xCC', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xCF', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xDF', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xE2', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xE6', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xEB', '\n', '\r', '\f', '\r', '\xE', '\r', '\xEE', '\v', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFD', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x104', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x107', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x10F', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x112', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x2', '\x3', '\n', '\x1B', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x2', '\n', 
		'\x3', '\x2', '\x1A', '\x1C', '\x4', '\x2', '\x19', '\x19', '\x1B', '\x1C', 
		'\x3', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\v', '\f', '\x3', '\x2', 
		'\v', '\r', '\x4', '\x2', '\b', '\b', '\xE', '\xE', '\x3', '\x2', '\xF', 
		'\x10', '\x3', '\x2', '\x11', '\x16', '\x2', '\x127', '\x2', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\b', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xB7', '\x3', '\x2', '\x2', '\x2', '\f', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xF7', '\x3', '\x2', '\x2', '\x2', ' ', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x100', '\x3', '\x2', '\x2', '\x2', '$', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x113', '\x3', '\x2', '\x2', '\x2', '*', '\x115', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x117', '\x3', '\x2', '\x2', '\x2', '.', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\x4', 
		'\x3', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', 
		'\x2', '\x2', '\x3', ';', '\x3', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\a', '\x17', '\x2', '\x2', '=', '>', '\a', '\x1E', '\x2', '\x2', '>', 
		'?', '\x5', '\x6', '\x4', '\x2', '?', '@', '\a', '\x1F', '\x2', '\x2', 
		'@', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x17', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\x1E', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x1A', '\x2', '\x2', '\x44', '\x45', '\a', ' ', '\x2', '\x2', '\x45', 
		'\x46', '\a', '\x1B', '\x2', '\x2', '\x46', 'G', '\a', '!', '\x2', '\x2', 
		'G', '\xA6', '\a', '\x1F', '\x2', '\x2', 'H', 'I', '\a', '\x18', '\x2', 
		'\x2', 'I', 'J', '\a', '\x1E', '\x2', '\x2', 'J', 'K', '\a', '\x1A', '\x2', 
		'\x2', 'K', '\xA6', '\a', '\x1F', '\x2', '\x2', 'L', 'M', '\a', '\x3', 
		'\x2', '\x2', 'M', 'N', '\a', '\x1A', '\x2', '\x2', 'N', 'O', '\a', '\x1D', 
		'\x2', '\x2', 'O', '\xA6', '\x5', '\x6', '\x4', '\x2', 'P', 'Q', '\a', 
		'\x3', '\x2', '\x2', 'Q', 'R', '\a', '\x1A', '\x2', '\x2', 'R', 'S', '\a', 
		'\x1D', '\x2', '\x2', 'S', '\xA6', '\x5', '\b', '\x5', '\x2', 'T', 'U', 
		'\a', '\x1A', '\x2', '\x2', 'U', 'V', '\a', ' ', '\x2', '\x2', 'V', 'W', 
		'\a', '\x1B', '\x2', '\x2', 'W', 'X', '\a', '!', '\x2', '\x2', 'X', 'Y', 
		'\a', '\x1D', '\x2', '\x2', 'Y', '\xA6', '\x5', '\n', '\x6', '\x2', 'Z', 
		'[', '\a', '\x3', '\x2', '\x2', '[', '\\', '\a', '\x1A', '\x2', '\x2', 
		'\\', '^', '\a', ' ', '\x2', '\x2', ']', '_', '\a', '\x1B', '\x2', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '!', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\x1D', '\x2', '\x2', '\x62', '\x63', '\a', '\"', 
		'\x2', '\x2', '\x63', 'h', '\x5', '\x12', '\n', '\x2', '\x64', '\x65', 
		'\a', '\x4', '\x2', '\x2', '\x65', 'g', '\x5', '\x12', '\n', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '#', '\x2', '\x2', 'l', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x5', '\x2', '\x2', 'n', 'o', '\a', '\x1E', '\x2', 
		'\x2', 'o', 'p', '\x5', '\x1A', '\xE', '\x2', 'p', 'q', '\a', '\x1F', 
		'\x2', '\x2', 'q', 'u', '\a', '\"', '\x2', '\x2', 'r', 't', '\x5', '\x4', 
		'\x3', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'z', '\a', '#', '\x2', '\x2', 'y', '{', '\x5', '\x16', 
		'\f', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', 
		'\x2', '\x2', '{', '}', '\x3', '\x2', '\x2', '\x2', '|', '~', '\x5', '\x18', 
		'\r', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x6', '\x2', '\x2', '\x80', '\x81', '\a', '\x1E', '\x2', '\x2', 
		'\x81', '\x82', '\x5', '\x14', '\v', '\x2', '\x82', '\x83', '\a', '\x1F', 
		'\x2', '\x2', '\x83', '\x87', '\a', '\"', '\x2', '\x2', '\x84', '\x86', 
		'\x5', '\x4', '\x3', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '#', '\x2', '\x2', '\x8B', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x5', ',', '\x17', '\x2', '\x8D', '\x8E', 
		'\a', '\x1A', '\x2', '\x2', '\x8E', '\x90', '\a', '\x1E', '\x2', '\x2', 
		'\x8F', '\x91', '\x5', '\"', '\x12', '\x2', '\x90', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x1F', '\x2', '\x2', 
		'\x93', '\x97', '\a', '\"', '\x2', '\x2', '\x94', '\x96', '\x5', '\x4', 
		'\x3', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', '\a', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\n', '\x6', '\x2', '\x9C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'#', '\x2', '\x2', '\x9F', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA6', '\x5', ' ', '\x11', '\x2', '\xA1', '\xA2', '\a', '\x3', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\x1A', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\x1D', '\x2', '\x2', '\xA4', '\xA6', '\x5', ' ', '\x11', '\x2', '\xA5', 
		'<', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', 'H', '\x3', '\x2', '\x2', '\x2', '\xA5', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', 'P', '\x3', '\x2', '\x2', '\x2', '\xA5', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', 'Z', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'm', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\x8C', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAB', '\a', '\x1A', '\x2', 
		'\x2', '\xA8', '\xAB', '\x5', '\n', '\x6', '\x2', '\xA9', '\xAB', '\x5', 
		'\xE', '\b', '\x2', '\xAA', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\a', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\x1A', '\x2', '\x2', '\xAD', '\xAE', '\a', ' ', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x1B', '\x2', '\x2', '\xAF', '\xB0', '\a', '!', '\x2', 
		'\x2', '\xB0', '\t', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\b', 
		'\x6', '\x1', '\x2', '\xB2', '\xB3', '\a', '\x1E', '\x2', '\x2', '\xB3', 
		'\xB4', '\x5', '\n', '\x6', '\x2', '\xB4', '\xB5', '\a', '\x1F', '\x2', 
		'\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x5', 
		'\f', '\a', '\x2', '\xB7', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\f', '\x5', '\x2', '\x2', '\xBA', '\xBB', '\x5', 
		'\x30', '\x19', '\x2', '\xBB', '\xBC', '\x5', '\n', '\x6', '\x6', '\xBC', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\f', '\x4', '\x2', 
		'\x2', '\xBE', '\xBF', '\x5', '.', '\x18', '\x2', '\xBF', '\xC0', '\x5', 
		'\n', '\x6', '\x5', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\t', '\x2', '\x2', '\x2', '\xC7', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCD', '\x5', '\x10', '\t', '\x2', '\xC9', 
		'\xCA', '\a', '\b', '\x2', '\x2', '\xCA', '\xCC', '\x5', '\x10', '\t', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\t', 
		'\x3', '\x2', '\x2', '\xD1', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\t', '\x4', '\x2', '\x2', '\xD3', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x5', '\x1C', '\xF', '\x2', '\xD5', '\xD6', '\x5', 
		'\x32', '\x1A', '\x2', '\xD6', '\xD7', '\x5', '\x1E', '\x10', '\x2', '\xD7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\t', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x1E', '\x2', '\x2', '\xDA', '\xDB', '\x5', 
		'\x1A', '\xE', '\x2', '\xDB', '\xDC', '\a', '\x1F', '\x2', '\x2', '\xDC', 
		'\xE0', '\a', '\"', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\x4', '\x3', 
		'\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\a', 
		'#', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\x16', '\f', '\x2', '\xE5', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\x17', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\n', '\x2', '\x2', '\xE8', '\xEC', '\a', '\"', '\x2', '\x2', '\xE9', 
		'\xEB', '\x5', '\x4', '\x3', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '#', '\x2', '\x2', '\xF0', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF2', '\x5', '\x1C', '\xF', '\x2', '\xF2', 
		'\xF3', '\x5', '\x32', '\x1A', '\x2', '\xF3', '\xF4', '\x5', '\x1E', '\x10', 
		'\x2', '\xF4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'\n', '\x6', '\x2', '\xF6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\x5', '\n', '\x6', '\x2', '\xF8', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\x1A', '\x2', '\x2', '\xFA', '\xFC', '\a', 
		'\x1E', '\x2', '\x2', '\xFB', '\xFD', '\x5', '&', '\x14', '\x2', '\xFC', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'\x1F', '\x2', '\x2', '\xFF', '!', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x105', '\x5', '$', '\x13', '\x2', '\x101', '\x102', '\a', '\x4', '\x2', 
		'\x2', '\x102', '\x104', '\x5', '$', '\x13', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '#', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x5', '*', '\x16', 
		'\x2', '\x109', '\x10A', '\a', '\x1A', '\x2', '\x2', '\x10A', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x110', '\x5', '(', '\x15', '\x2', '\x10C', 
		'\x10D', '\a', '\x4', '\x2', '\x2', '\x10D', '\x10F', '\x5', '(', '\x15', 
		'\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x1A', '\x2', '\x2', '\x114', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\t', '\x5', '\x2', '\x2', '\x116', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x118', '\t', '\x6', '\x2', '\x2', '\x118', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\t', '\a', '\x2', '\x2', 
		'\x11A', '/', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\t', '\b', 
		'\x2', '\x2', '\x11C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\t', '\t', '\x2', '\x2', '\x11E', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x37', '^', 'h', 'u', 'z', '}', '\x87', '\x90', '\x97', '\x9C', 
		'\xA5', '\xAA', '\xB7', '\xC1', '\xC3', '\xCD', '\xE0', '\xE5', '\xEC', 
		'\xFC', '\x105', '\x110',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
